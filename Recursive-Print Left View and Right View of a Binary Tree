For Right View everything same except these two lines.First recursively call for right subtree and then left subtree.

    rightViewUtil(root->right,level+1,max_level);
    rightViewUtil(root->left,level+1,max_level);


#include <iostream>

using namespace std;


struct Node{
    int data;
    struct Node* left,*right;
};
struct Node* newNode(int data){
    Node* temp = new Node;
    temp->data=data;
    temp->left=temp->right=NULL;
    return temp;
}
void leftViewUtil(struct Node* root,int level,int *maxLevel)
{
    if(root==NULL)
    return;
    if(*maxLevel<level)
    {
        cout<<root->data<<" ";
        *maxLevel=level;
    }
    leftViewUtil(root->left,level+1,maxLevel);
    leftViewUtil(root->right,level+1,maxLevel);
}
void leftView(struct Node* root)
{
    int maxLevel=0;
    leftViewUtil(root,1,&maxLevel);
}
int main() 
{ 
    Node* root = newNode(12); 
    root->left = newNode(10); 
    root->right = newNode(30); 
    root->right->left = newNode(25); 
    root->right->right = newNode(40); 
  
    leftView(root); 
  
    return 0; 
}
